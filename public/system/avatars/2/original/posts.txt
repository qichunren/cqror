INSERT INTO `posts` VALUES (1,'Oracle解锁','<p>今天在Plsql中，给Oracle数据库中一个表添加字段的时候，出错了错误，提示：</p>\r\n<h3 class=\"r\"><span class=\"l\">Oracle资源正忙,要求指定NOWAIT</span></h3>\r\n<p><span class=\"l\">在网上一查，是表给锁住了，用如下的方法来解决。<br /></span></p>\r\n<p>SQL&gt; select t2.username,t2.sid,t2.serial#,t2.logon_time<br />&nbsp; 2&nbsp; from v$locked_object t1,v$session t2<br />&nbsp; 3&nbsp; where t1.session_id=t2.sid order by t2.logon_time;<br /><br />USERNAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SID&nbsp;&nbsp;&nbsp; SERIAL# LOGON_TIME<br />------------------------------ ---------- ---------- -----------<br />QICHUNREN &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 37&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9731 2010-4-10 1<br /><br />SQL&gt; alter system kill session \'37,9731\';<br /><br />System altered<br /><br />SQL&gt;</p>\r\n<p>&nbsp;</p>\r\n<p>select * from v$session where sid=?;</p>\r\n<p>&nbsp;</p>\r\n<p>相关的博客：<a href=\"http://bot.javaeye.com/blog/429478\" target=\"_blank\">http://bot.javaeye.com/blog/429478</a></p>\r\n<p><a href=\"http://hi.baidu.com/shuyangwhj/blog/item/c321aa133812f4846538dbc5.html\" target=\"_blank\">http://hi.baidu.com/shuyangwhj/blog/item/c321aa133812f4846538dbc5.html</a></p>',1,'2010-04-10 06:06:43','2010-04-10 07:02:38'),(2,'写Rails程序容易出现的几个不好的地方','<p>这几个地方不知道大家有注意到没有，我今天发现的一个地方就是</p>\r\n<p>class EcGood &lt; ActiveRecord::Base<br /><br />&nbsp; #商品分类<br />&nbsp; GoodCategory = Category.find(:all).map{|category|[category.cn_n,category.id]}<br /><br />&nbsp; #商品品牌<br />&nbsp; GoodBrand = EcBrand.find(:all).map{|brand|[brand.brand_name,brand.id]}</p>\r\n<p>end</p>\r\n<p>&nbsp;</p>\r\n<p>在ActiveRecord中有这样的代码，实在不应该啊。</p>\r\n<p>&nbsp;</p>\r\n<p>初次一看没有什么问题，可是Ruby代码是自上而下来执行的，这样会给数据库带来无关的查询。解决办法就是将这个封装到方法中去，另外也说明全局变量要少用。</p>\r\n<p>&nbsp;</p>\r\n<p>有时间再更新一下这篇文章来反思一下自己。</p>',1,'2010-04-12 02:28:15','2010-04-19 03:06:07'),(3,'gem install with permission problem','<p>qichunren@zhaobak:~&gt; gem install hpricot<br />ERROR:&nbsp; While executing gem ... (Gem::FilePermissionError)<br />&nbsp;&nbsp;&nbsp; You don\'t have write permissions into the /opt/ruby-enterprise-1.8.7/lib/ruby/gems/1.8 directory.</p>\r\n<p>以上的问题就是我用qichunren用户登录到系统中，我gem install hpricot应该是将gem安装到qichunren这个用户的home目录的,就是/home/qichunren/.gem目录。</p>\r\n<p>可是现在它却想将gem安装到root权限的目录中去。在gem官方查了一下，发现设置GEM_HOME目录就解决了这个问题啦。</p>\r\n<p>qichunren@zhaobak:~&gt; <strong>export GEM_HOME=/home/qichunren<br /></strong>qichunren@zhaobak:~&gt; gem install hpricot<br />Building native extensions.&nbsp; This could take a while...<br />Successfully installed hpricot-0.8.2<br />1 gem installed<br />Installing ri documentation for hpricot-0.8.2...<br />Installing RDoc documentation for hpricot-0.8.2...<br />qichunren@zhaobak:~&gt;</p>',1,'2010-04-12 03:33:29','2010-04-12 03:33:29'),(4,'selenium初试用','<p><a href=\"http://seleniumhq.org/\" target=\"_blank\">selenium</a>我之前在书上看到有介绍，但是没有去玩过，今天我时间研究了一下，发现是一个很不错的工具。  首先selenium提供了一个Firefox的插件，可以录制动作，然后可以播放。  另外selenium也有selenium-server，是用java写的，不错它提供了各种主流语言的client,我研究了一下ruby客户端,发现很好玩啊，还能网页截图呢。</p>\r\n<pre class=\"code\">require \"rubygems\"\r\ngem \"selenium-client\"\r\nrequire \"selenium/client\"\r\n\r\n@selenium_driver = Selenium::Client::Driver.new \\\r\n      :host =&gt; \"localhost\",\r\n      :port =&gt; 4444,\r\n      :browser =&gt; \"*chrome\",\r\n      :url =&gt; \"http://www.cqror.com\",\r\n      :timeout_in_second =&gt; 60\r\n@selenium_driver.start\r\n@selenium_driver.open \"http://www.cqror.com\"\r\n@selenium_driver.window_maximize()\r\n@selenium_driver.window_focus()\r\n@selenium_driver.capture_entire_page_screenshot(\"c:\\\\webcqror.png\")\r\n</pre>\r\n<p>这玩意太好玩了，做自动化测试是很不错的。</p>',1,'2010-04-15 06:51:53','2010-04-15 06:58:21'),(5,'在VPS上部署Lightpd + FastCGI的rails应用的心得','<p>这个VPS是前些时间买的，我和一个朋友共同使用，为了方便安全地管理好各自的应用，我花费了一些时间来搞这个部署和配置。</p>\r\n<p>我和我的朋友各有一个Rails应用，部署方式我还是选择我喜欢的Lighttpd + FastCGI的方式。一开始部署的时候，我没有多想，用root帐号来部署的，一段时间后，发现我们俩管理自己的应用很不方便，都是用root帐号来管理Lighttpd，我一开始想用Lighttpd上的虚拟主机模块来搞这个，但是感觉不爽，简单的事情搞得复杂了。</p>\r\n<p>我然后想到的方式是: root帐号启动Lighttpd分别与我和朋友的FastCGI进程交互，一开始看到Lighttpd中有一个server.username，我以为这个配置选项可以用于各个$HTTP[\"host\"]配置块中，搞了半天，我们两个$HTTP[\"host\"]配置中，后一个的server.username总是会去覆盖前面一个的配置，这样权限都乱了，不好管理。然后查了一下文档，发现server.username是指启动Ligghtd服务器的用户，而不是用来启动各个HOST的用户。看来不能让root用户来为我管理后端的FastCGI进程了，那么Lighttpd如何与后端的FastCGI进程交互呢？通过Socket来解决，具体的配置如下：</p>\r\n<pre class=\"code\">$HTTP[\"host\"] == \"www.cqror.com\" {\r\n server.document-root = \"/home/qichunren/www/cqror.com/public\"\r\n server.error-handler-404 = \"/dispatch.fcgi\"\r\n# server.errorlog = \"/home/qichunren/temp/lighttpd_error.log\"\r\n fastcgi.server = (\r\n   \".fcgi\" =&gt;\r\n     (\r\n       (\"socket\" =&gt; \"/home/qichunren/temp/lighttpd/socket/rails.socket-0\"),\r\n       (\"socket\" =&gt; \"/home/qichunren/temp/lighttpd/socket/rails.socket-1\")\r\n     ),\r\n   \".php\" =&gt;\r\n     (  \"localhost\" =&gt;\r\n        (\r\n         \"socket\" =&gt; \"/var/run/php-fastcgi.socket\",\r\n         \"bin-path\" =&gt; \"/usr/local/php-5.2.13/bin/php-cgi\"\r\n      )\r\n     )\r\n )\r\n\r\n}\r\n</pre>\r\n<p>这样就ok了，然后我的qichunren用户可以管理自己的FastCGI进程了，而不用理会Lighttpd服务器了。 ps -ef | grep ruby，可以看到一共有四个fcgi进程在跑着。 可以写一个shell脚来来方便地管理fcgi进程：</p>\r\n<pre class=\"code\">#!/bin/sh\r\n\r\nDISPATCH_PATH=/home/qichunren/www/cqror.com/public/dispatch.fcgi\r\nSOCKET_PATH=/home/qichunren/temp/lighttpd/socket\r\nRAILS_ENV=production\r\nexport RAILS_ENV\r\n\r\ncase \"$1\" in\r\n\r\n  start)\r\n    for num in 0 1\r\n    do\r\n      /usr/local/spawn-fcgi-1.6.3/bin/spawn-fcgi -f $DISPATCH_PATH -s $SOCKET_PATH/rails.socket-$num\r\n    done\r\n    ;;\r\n\r\n  stop)\r\n    killall -9 dispatch.fcgi\r\n    ;;\r\n\r\n  restart)\r\n    $0 stop\r\n    $0 start\r\n    ;;\r\n\r\n  *)\r\n    echo \"Usage: dispatch.sh {start|stop|restart}\"\r\n    ;;\r\n\r\nesac\r\n\r\nexit 0\r\n</pre>',1,'2010-04-17 03:50:30','2010-04-17 03:54:11'),(6,'理一下Rails项目中的rake任务','<p>从开始到现在(rails 2.3.5)，Rails项目中包含的rake任务越来越多了，在这里理一下，总结一下它们的作用。</p>\r\n<p>&nbsp;</p>\r\n<pre style=\"border:1px solid #BDBDBD;overflow:scroll\">rake db:abort_if_pending_migrations       # Raises an error if there are pending migrations\r\nrake db:charset                           # Retrieves the charset for the current environment\'s database\r\nrake db:collation                         # Retrieves the collation for the current environment\'s database\r\nrake db:create                            # Create the database defined in config/database.yml for the current RAILS_ENV\r\nrake db:create:all                        # Create all the local databases defined in config/database.yml\r\nrake db:drop                              # Drops the database for the current RAILS_ENV\r\nrake db:drop:all                          # Drops all the local databases defined in config/database.yml\r\nrake db:fixtures:identify                 # Search for a fixture given a LABEL or ID.\r\nrake db:fixtures:load                     # Load fixtures into the current environment\'s database.\r\nrake db:migrate                           # Migrate the database through scripts in db/migrate and update db/schema.rb by invoking db:schema:dump. Target specific version with VERSION=x. Turn off ou...\r\nrake db:migrate:down                      # Runs the \"down\" for a given migration VERSION.\r\nrake db:migrate:redo                      # Rollbacks the database one migration and re migrate up.\r\nrake db:migrate:reset                     # Resets your database using your migrations for the current environment\r\nrake db:migrate:up                        # Runs the \"up\" for a given migration VERSION.\r\nrake db:reset                             # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds.\r\nrake db:rollback                          # Rolls the schema back to the previous version.\r\nrake db:schema:dump                       # Create a db/schema.rb file that can be portably used against any DB supported by AR\r\nrake db:schema:load                       # Load a schema.rb file into the database\r\nrake db:seed                              # Load the seed data from db/seeds.rb\r\nrake db:sessions:clear                    # Clear the sessions table\r\nrake db:sessions:create                   # Creates a sessions migration for use with ActiveRecord::SessionStore\r\nrake db:setup                             # Create the database, load the schema, and initialize with the seed data\r\nrake db:structure:dump                    # Dump the database structure to a SQL file\r\nrake db:test:clone                        # Recreate the test database from the current environment\'s database schema\r\nrake db:test:clone_structure              # Recreate the test databases from the development structure\r\nrake db:test:load                         # Recreate the test database from the current schema.rb\r\nrake db:test:prepare                      # Check for pending migrations and load the test schema\r\nrake db:test:purge                        # Empty the test database\r\nrake db:version                           # Retrieves the current schema version number\r\nrake doc:app                              # Build the RDOC HTML Files\r\nrake doc:clobber_app                      # Remove rdoc products\r\nrake doc:clobber_plugins                  # Remove plugin documentation\r\nrake doc:clobber_rails                    # Remove rdoc products\r\nrake doc:guides                           # Generate Rails guides\r\nrake doc:plugins                          # Generate documentation for all installed plugins\r\nrake doc:plugins:rtaobao                  # Generate documentation for the rtaobao plugin\r\nrake doc:rails                            # Build the RDOC HTML Files\r\nrake doc:reapp                            # Force a rebuild of the RDOC files\r\nrake doc:rerails                          # Force a rebuild of the RDOC files\r\nrake gems                                 # List the gems that this rails application depends on\r\nrake gems:build                           # Build any native extensions for unpacked gems\r\nrake gems:build:force                     # Force the build of all gems\r\nrake gems:install                         # Installs all required gems.\r\nrake gems:refresh_specs                   # Regenerate gem specifications in correct format.\r\nrake gems:unpack                          # Unpacks all required gems into vendor/gems.\r\nrake gems:unpack:dependencies             # Unpacks all required gems and their dependencies into vendor/gems.\r\nrake log:clear                            # Truncates all *.log files in log/ to zero bytes\r\nrake middleware                           # Prints out your Rack middleware stack\r\nrake notes                                # Enumerate all annotations\r\nrake notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=WTFHAX\r\nrake notes:fixme                          # Enumerate all FIXME annotations\r\nrake notes:optimize                       # Enumerate all OPTIMIZE annotations\r\nrake notes:todo                           # Enumerate all TODO annotations\r\nrake rails:freeze:edge                    # Lock to latest Edge Rails, for a specific release use RELEASE=1.2.0\r\nrake rails:freeze:gems                    # Lock this application to the current gems (by unpacking them into vendor/rails)\r\nrake rails:template                       # Applies the template supplied by LOCATION=/path/to/template\r\nrake rails:unfreeze                       # Unlock this application from freeze of gems or edge and return to a fluid use of system gems\r\nrake rails:update                         # Update both configs, scripts and public/javascripts from Rails\r\nrake rails:update:application_controller  # Rename application.rb to application_controller.rb\r\nrake rails:update:configs                 # Update config/boot.rb from your current rails install\r\nrake rails:update:generate_dispatchers    # Generate dispatcher files in RAILS_ROOT/public\r\nrake rails:update:javascripts             # Update your javascripts from your current rails install\r\nrake rails:update:scripts                 # Add new scripts to the application script/ directory\r\nrake routes                               # Print out all defined routes in match order, with names.\r\nrake secret                               # Generate a crytographically secure secret key.\r\nrake spec                                 # Run all specs in spec directory (excluding plugin specs)\r\nrake spec:clobber_rcov                    # Remove rcov products for rcov\r\nrake spec:controllers                     # Run the code examples in spec/controllers\r\nrake spec:db:fixtures:load                # Load fixtures (from spec/fixtures) into the current environment\'s database.\r\nrake spec:doc                             # Print Specdoc for all specs (excluding plugin specs)\r\nrake spec:helpers                         # Run the code examples in spec/helpers\r\nrake spec:integration                     # Run the code examples in spec/integration\r\nrake spec:lib                             # Run the code examples in spec/lib\r\nrake spec:models                          # Run the code examples in spec/models\r\nrake spec:plugin_doc                      # Print Specdoc for all plugin examples\r\nrake spec:plugins                         # Run the code examples in vendor/plugins (except RSpec\'s own)\r\nrake spec:plugins:rspec_on_rails          # Runs the examples for rspec_on_rails\r\nrake spec:rcov                            # Run all specs in spec directory with RCov (excluding plugin specs)\r\nrake spec:views                           # Run the code examples in spec/views\r\nrake stats                                # Report code statistics (KLOCs, etc) from the application\r\nrake test                                 # Run all unit, functional and integration tests\r\nrake test:benchmark                       # Run tests for benchmarkdb:test:prepare / Benchmark the performance tests\r\nrake test:functionals                     # Run tests for functionalsdb:test:prepare / Run the functional tests in test/functional\r\nrake test:integration                     # Run tests for integrationdb:test:prepare / Run the integration tests in test/integration\r\nrake test:plugins                         # Run tests for pluginsenvironment / Run the plugin tests in vendor/plugins/*/**/test (or specify with PLUGIN=name)\r\nrake test:profile                         # Run tests for profiledb:test:prepare / Profile the performance tests\r\nrake test:recent                          # Run tests for recentdb:test:prepare / Test recent changes\r\nrake test:uncommitted                     # Run tests for uncommitteddb:test:prepare / Test changes since last checkin (only Subversion and Git)\r\nrake test:units                           # Run tests for unitsdb:test:prepare / Run the unit tests in test/unit\r\nrake time:zones:all                       # Displays names of all time zones recognized by the Rails TimeZone class, grouped by offset.\r\nrake time:zones:local                     # Displays names of time zones recognized by the Rails TimeZone class with the same offset as the system local time\r\nrake time:zones:us                        # Displays names of US time zones recognized by the Rails TimeZone class, grouped by offset.\r\nrake tmp:cache:clear                      # Clears all files and directories in tmp/cache\r\nrake tmp:clear                            # Clear session, cache, and socket files from tmp/\r\nrake tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids\r\nrake tmp:pids:clear                       # Clears all files in tmp/pids\r\nrake tmp:sessions:clear                   # Clears all files in tmp/sessions\r\nrake tmp:sockets:clear                    # Clears all files in tmp/sockets\r\n\r\n</pre>\r\n<p>其中的</p>\r\n<pre style=\"border:1px solid #BDBDBD;overflow:scroll\">rake spec                                 # Run all specs in spec directory (excluding plugin specs)\r\nrake spec:clobber_rcov                    # Remove rcov products for rcov\r\nrake spec:controllers                     # Run the code examples in spec/controllers\r\nrake spec:db:fixtures:load                # Load fixtures (from spec/fixtures) into the current environment\'s database.\r\nrake spec:doc                             # Print Specdoc for all specs (excluding plugin specs)\r\nrake spec:helpers                         # Run the code examples in spec/helpers\r\nrake spec:integration                     # Run the code examples in spec/integration\r\nrake spec:lib                             # Run the code examples in spec/lib\r\nrake spec:models                          # Run the code examples in spec/models\r\nrake spec:plugin_doc                      # Print Specdoc for all plugin examples\r\nrake spec:plugins                         # Run the code examples in vendor/plugins (except RSpec\'s own)\r\nrake spec:plugins:rspec_on_rails          # Runs the examples for rspec_on_rails\r\nrake spec:rcov                            # Run all specs in spec directory with RCov (excluding plugin specs)\r\nrake spec:views \r\n</pre>\r\n<p>是我使用了rspec-rails的gem带进来的。</p>',1,'2010-04-19 12:02:23','2010-04-19 12:08:40'),(7,'Lighttpd中配置Rails的页面缓存','<p>如果Rails工程中配置了页面缓存的存放路径：<br />config.action_controller.page_cache_directory = RAILS_ROOT + \"/public/cache/\"<br /><br /><br />那么在lighttpd服务器下，还需要配置一下url rewrite才能用上rails页面缓存这一利器。<br /><br />例如<br />在网站首页的控制器中配置了caches_page :index，会在Rails.root/public/cache/中生成一个index.html文件<br /><br />需要在lighttpd的配置文件中加上这个才行：<br /><strong>&nbsp;url.rewrite += ( \"^/$\" =&gt; \"cache/index.html\" )<br />&nbsp;url.rewrite += ( \"^([^.]+)$\" =&gt; \"cache/$1.html\" )</strong><br />&nbsp;server.error-handler-404 = \"/dispatch.fcgi\"<br /><br />它是指优先查找cache目录，如果找不到就交给rails的路由去处理咯。<br /><br /><br />数量级的速度提升，感觉真爽。</p>',1,'2010-04-20 12:03:38','2010-04-20 12:03:38'),(13,'最近乱谈','<p>最近工作感觉很没有意思。我一有时间就在开发自己的一个电子商务项目，我目前在挤时间做这个项目，希望能快点做好。不过，美工这一块我还真不在行，精通CSS也帮不了我，网上的模板也没有见着我顺心的，我打算项目的业务功能完善后，找一个有实力的专业美工美化一起合作一下。</p>\r\n<p>&nbsp;</p>\r\n<p>搞完这一个项目的下一下项目应该是,<strong>云**</strong>。(暂时保密)</p>\r\n<p>加油！</p>',2,'2010-05-10 07:41:00','2010-05-10 07:43:39'),(14,'互联网模式的一些思考','<p>一直在思考互联网的创新模式，今天来随便说一下，备忘一下，顺便整理一下自己的思路。</p>\r\n<p style=\"text-align: left;\"><strong>团购网</strong></p>\r\n<p style=\"text-align: left;\">前几个月注意到的。最开始是由王兴引入的美团网。同于技术门槛低，现在有几百个＊团网了。这是既SNS后的又一波热潮，利用SNS来进行病毒式的销售，模式非常不错。不过目前的这一大堆＊团网，不知道到时候能笑到最后的有几个。其实这种模式我之前也有过类似的思考，前些时候在熟悉Taobao开放平台时，就想到做一个这样的APP，叫招买宝。在一个特定的时间期限内购买人数达到一个级别后就算成交，各大买家从中可以得到比普通商品更大的实惠，而卖家也可以薄得多销，减少库存，同时放大品牌效应。</p>\r\n<p style=\"text-align: left;\">&nbsp;</p>\r\n<p style=\"text-align: left;\"><strong>收益宝</strong> http://www.shouyibao.com/</p>\r\n<p style=\"text-align: left;\">今天注意到的。虚拟炒股也能赚钱！你在上面进行虚拟盘的买卖操作，通过你的收益成绩的展示，提升了你的威望，那么你你最近的买卖操作对于很大跟风的人来说就是有价值的，你可以设置一个价格，别人浏览需要支付一定的费用。而网站本身从中抽取一定的费用。 在此我不是意在炒股这些事儿，而是这背后的模式：<strong>知识技能产生价值</strong>，而之前有人想做一个有偿问答社区，也是这种<strong>知识技能产生价值，</strong>但是这种有偿问答社区却很难运行下去。这个和收益宝不一样，前者有随时间而不断产生的新环境，而后者却在随时间积累却来越丰富。不过有偿问答社区在特定的垂直领域有待挖掘。</p>\r\n<p style=\"text-align: left;\"><strong>客满网</strong></p>\r\n<p style=\"text-align: left;\">上个星期知道的。这个网站是想为了减少企业与客户之前的交流成本而建立的，每个企业通过这个平台来与企业的客户进行交流，从中了解客户的想法。又一朵云！我认为它应该是从uservoice.com中得到灵感的吧。</p>\r\n<p style=\"text-align: left;\"><strong>赶牛网</strong></p>\r\n<p style=\"text-align: left;\">去年下半年的时候知道的。去年的时候,Twitter的微博客网站很多，同质化很厉害，都是在烧钱。而赶牛网却在财经领域独竖一织，给人清新实用的感觉。赶牛网有和Twitter 一样的模式，不过它结合本身领域的特点，添加了很多独特的功能。</p>\r\n<p style=\"text-align: left;\">&nbsp;</p>\r\n<p style=\"text-align: left;\">总结和激励：互联网是一个开放的世界，有太多的东西值得去挖掘和探索。</p>\r\n<p style=\"text-align: left;\">1. 当想到了一个idea，首先去调查一下有没有这方面的实现，其优缺点，然后和相关的朋友讨论，讨论可行性，最重要的是<strong>Get Real</strong>。</p>\r\n<p style=\"text-align: left;\">2. 当看到了一个模式案例，你大不可必跟风涌上，从中思考，加上创新，说不定经过点化，又创新了一个模式，另外就是向垂直细分方向去探索。</p>\r\n<p style=\"text-align: left;\">－－－－－－－－－－－－－－－－－－－</p>\r\n<p style=\"text-align: left;\">＜免费＞这本书怎么样？想买一本来看看，之前那本＜正在爆发的互联网革命＞感觉写得不够深入，看完也就那样，讲的都是摆在眼前的道理了。</p>',8,'2010-05-12 13:10:53','2010-05-12 13:43:56'),(15,'Linux下更换服务器的IP地址','<p>Linux下更换服务器的IP地址，最为简便的方法，就是直接在命令行中，编辑网卡配置文件，然后重启网卡服务就可以了。</p>\r\n<p>使用root帐号登录，vi /etc/sysconfig/network/ifcfg-wlan-id-11:0c:f1:1d:a5:6d(类似这样的文件)</p>\r\n<p><span style=\"color: #000000;\">/etc/init.d/network&nbsp;restart</span></p>',8,'2010-05-18 08:40:11','2010-05-18 08:42:07'),(16,'一个管理数据字典的插件','<p>这个灵感是来自quakewang的，</p>\r\n<p><a href=\"http://quake.javaeye.com/blog/448235\">http://quake.javaeye.com/blog/448235 </a></p>\r\n<p>在他的基础上加了常量的声明。</p>\r\n<p>&nbsp;</p>\r\n<p>在平时的项目中，对一些如状态/类型等字段，在model中直接写很是枯燥，就是我们所说的数据字典，</p>\r\n<p>举个例子：posts表中有一个字段status(integer)，0表示正常，1表示草搞，2表示已删除</p>\r\n<p>为了代码的良好维护性，一般会将这个数字常量约定配置成常量的。这样</p>\r\n<pre>[code:ruby]\r\n class Post &lt; ActiveRecord::Base\r\n   # for column status  \r\n  NORMAL = 0; DRAFT = 1; DELETED = 2  \r\n  STATUS_SELECT = [ [\"正常\", 0], [\"草稿\", 1], [\"已删除\", 2] ] \r\n  # 这个是用于页面的select下拉框的\r\nend\r\n[/code]\r\n</pre>\r\n<p>现在可以直接这样：</p>\r\n<pre class=\"code\">enum_attr :status, [ [\"正常\", 0, \"normal\"], [\"草稿\", 1, \"draft\"], [\"已删除\", 2, \"deleted\"] ] \r\n</pre>\r\n<p>项目地址：<a href=\"http://github.com/qichunren/enum_attr\" target=\"_blank\">http://github.com/qichunren/enum_attr</a></p>',1,'2010-05-19 10:14:08','2010-07-24 14:18:59'),(17,'Rails中一个没有解决的BUG:Expected ... to define ...','<p>http://www.ruby-forum.com/topic/77708</p>\r\n<p>http://dev.rubyonrails.org/ticket/7452</p>\r\n<p>http://hostingrails.com/Expected-to-define</p>\r\n<p>http://www.hostingrails.com/LoadError-very-strange-error</p>\r\n<p>&nbsp;</p>\r\n<p>http://shiningray.cn/rails-cuo-wu-loaderror-expected-xrb-to-define-x.html</p>\r\n<pre class=\"code\">LoadError (Expected /web/zhao_backend2/app/controllers/customer/identity_confirm_controller.rb to define Customer::IdentityConfirmController):\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/activesupport-2.0.2/lib/active_support/dependencies.rb:249:in `load_missing_constant\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/activesupport-2.0.2/lib/active_support/dependencies.rb:453:in `const_missing\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/activesupport-2.0.2/lib/active_support/inflector.rb:257:in `constantize\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/activesupport-2.0.2/lib/active_support/core_ext/string/inflections.rb:148:in `constantize\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/actionpack-2.0.2/lib/action_controller/routing.rb:1426:in `recognize\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/actionpack-2.0.2/lib/action_controller/dispatcher.rb:170:in `handle_request\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/actionpack-2.0.2/lib/action_controller/dispatcher.rb:115:in `dispatch\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/actionpack-2.0.2/lib/action_controller/dispatcher.rb:126:in `dispatch_cgi\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/actionpack-2.0.2/lib/action_controller/dispatcher.rb:9:in `dispatch\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/rails-2.0.2/lib/fcgi_handler.rb:101:in `process_request\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/rails-2.0.2/lib/fcgi_handler.rb:149:in `with_signal_handler\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/rails-2.0.2/lib/fcgi_handler.rb:99:in `process_request\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/rails-2.0.2/lib/fcgi_handler.rb:77:in `process_each_request\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/fcgi-0.8.8/lib/fcgi.rb:612:in `each_cgi\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/fcgi-0.8.8/lib/fcgi.rb:609:in `each\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/fcgi-0.8.8/lib/fcgi.rb:609:in `each_cgi\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/rails-2.0.2/lib/fcgi_handler.rb:76:in `process_each_request\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/rails-2.0.2/lib/fcgi_handler.rb:50:in `process!\'\r\n    /usr/local/ruby-1.8.7-p248/lib/ruby/gems/1.8/gems/rails-2.0.2/lib/fcgi_handler.rb:24:in `process!\'\r\n    /public/dispatch.fcgi:24\r\n\r\nRendering /web/zhao_backend2/public/500.html (500 Internal Server Error)</pre>\r\n<p>到现在还没有解决</p>\r\n<hr />\r\n<p>&nbsp;</p>\r\n<p>更新：除在大家有提到的将require移到model定义内部（或者config中去），前天我在重构我的控制器代码时再次发现另一个trick.那就是控制器中不要存在这样的方同名前缀的action方法名，如def search___ 另一个叫def search.</p>\r\n<p>&nbsp;</p>\r\n<p>2010-7-8 更新：其实这个问题已经解决了有好长一段时间了，最终发现是部署方面出的问题，与语言和框架本身无关，具体是这样的:我们的系统是采用Lighttpd + 多个独立的fcgi进程的方式，我如果重启应用是采用直接kill掉fcgi进程，然后再重新启动fcgi进程的话，那么就有可能导致先前的lighttpd与旧的fcgi进程交互的时候没有正确关掉监听的进程，这个是虽然出现的。所以重启应用的正确做法是先关闭lighttpd服务器，然后杀掉后端的fcgi进程，然后再重启fcgi进程，再启动lighttpd服务器，这样就不会导致不干净残留的fcgi进程了，就不会出现当lighttpd分发到那个不干净残留的fcgi进程时所出来的500错误了。</p>',1,'2010-05-21 03:47:51','2010-07-08 20:55:11'),(18,'电子商务网站的 10 个易用性规则','<p>原文地址：<a href=\"http://www.ctochina.net/blog/ly%E6%9E%AB/show/3/17\">http://www.ctochina.net/blog/ly%E6%9E%AB/show/3/17</a><br />电子商务网站的竞争越来越激烈，虽然你可能在以最低的价格卖最好的东西，但同样重要的的是用户的购买体验，对电子商务网站而言，易用性就是让用户尽可能快而简单的完成购买，有时候，一条小小的改进可能带来巨大的改变。本来讲述了10条电子商务网站的易用性规则。</p>\r\n<h2 class=\"subtitle\">1. 用户无需注册直接购买</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/1.jpg\" alt=\"Let Shoppers Buy without Registering\" /></p>\r\n<p>很多公司喜欢让用户注册，但注册过程实在太冗长了，尤其对那些临时光顾的用户，强迫注册会将他们吓跑。让用户直接往购物车里添加货物，在结算前，另外提供一个注册选项以方便他们的下一次购买是一个很有效的方法，在任何时候都要明白，实现销售比收集一堆电子邮件地址更有价值。</p>\r\n<h2 class=\"subtitle\">2. 注册要简单</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/2.jpg\" alt=\"Keep the Signup Simple\" /></p>\r\n<p>你希望注册用户给你提供多少信息？也许是越多越好，然而实际上，你用不了那么多，你真正需要的也许只是一个邮件地址和一个密码。尽可能使用邮件地址作为用户名，因为用户名容易混淆，而邮件地址是唯一的，更容易记忆。</p>\r\n<h2 class=\"subtitle\">3. 告诉用户他们所处的步骤</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/3.jpg\" alt=\"Tell Users Where They Are\" /></p>\r\n<p>面包屑导航条是任何大型电子商务站点的必需，用户需要随时知道他们目前所处的步骤，以及后面余下的步骤，否则，用户会觉得茫然，甚至半途放弃。另外，面包屑导航条还可以帮助用户自由后退，返回，以便在需要的时候对前面的操作进行修改，如果面包屑导航条不容易实现，那你至少对每一步操作进行编号标识，如，第一步/共四步。</p>\r\n<h2 class=\"subtitle\">4. 让用户有安全感</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/4.jpg\" alt=\"Make Shoppers Feel Safe\" /></p>\r\n<p>用户对安全非常在意，尤其当他们需要输入信用卡号的时候，在用户购买的任一步骤，你都需要让他们有安全感，并且让他们知道你会保护他们的安全与隐私，最好的办法是在网站上部署 SSL。</p>\r\n<h2 class=\"subtitle\">5. 订单确认</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/5.jpg\" alt=\"Confirmation\" /></p>\r\n<p>确认页对一个电子商务网站的易用性来讲非常必要，不仅可以让用户对前面操作的内容进行确认，也避免了用户因不确定而不断向你查询。</p>\r\n<p>一个有效的确认操作包含以下三个部分：</p>\r\n<ol>\r\n<li>订单处理的最后一步，让用户进行确认，确认页应该包含所有必要的信息，订单概要，总价格，发货信息，以及订单取消按钮。 </li>\r\n<li>订单一旦确认，用户会看到订单确认信息以及订单号，这些信息可以保存和打印。 </li>\r\n<li>同时应该使用电子邮件将订单确认信息发给用户留档。 </li>\r\n</ol>\r\n<h2 class=\"subtitle\">6. 搜索功能</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/6.jpg\" alt=\"Search Function\" /></p>\r\n<p>任何电子商务网站需要一个随时可见的搜索框，用户可以对结果进行筛选，搜索功能可以让用户更好地查找商品，提供更愉快的体验。如果你的商品种类繁多，搜索应该支持按类别筛选。允许用户按颜色，尺码进行搜索也不失一个好方法，另外，也可以让用户定制自己的搜索结果，如每页显示多少条结果。</p>\r\n<h2 class=\"subtitle\">7. 列出相关产品</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/7.jpg\" alt=\"Specify Related Items\" /></p>\r\n<p>如果处理得当，列出相关产品可以带来交叉销售，比如，用户购买电子产品的时候，可以列出与该产品相关的电池，线缆等配件，Amazon 证明该方法十分有效。</p>\r\n<h2 class=\"subtitle\">8. 行动按钮（Call-to action button）</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/8.jpg\" alt=\"Call-to-Action Buttons\" /></p>\r\n<p>不要低估了那些行动按钮的力量，&ldquo;添加到购物篮&rdquo;，&ldquo;注册&rdquo;，&ldquo;结算&rdquo;一类的按钮可以提高你的成交率和易用性。要想让这些按钮吸引人，需要在字体，颜色，措辞，位置等方面仔细揣度，按钮应该足够大，清晰，色彩应该同背景形成对比。在措辞方面，应该使用&ldquo;添加到购物篮&rdquo;，而不是&ldquo;立即购买&rdquo;，后者会吓跑某些用户。应该考虑使用本地化语言，比如，美国用户更习惯&ldquo;添加到购物车&rdquo;，而英国用户习惯&ldquo;添加到购物篮&rdquo;。如果可能，可以使用 IP 区分客户的来源以便针对不同地区的用户，提供不同的本地化语言。</p>\r\n<h2 class=\"subtitle\">9. 避免隐匿费用</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/9.jpg\" alt=\"Avoid Hidden Charges\" /></p>\r\n<p>隐匿费用比任何东西都让客户愤怒，一定将价格，税，快递费用，以及可能有的优惠明明白白地显示给用户，而且越早越好，人们喜欢在添加货品到购物篮之前就知道它们需要多少钱。如果在结算之前发现多出来很多额外费用，他们会放弃订单且不会再来。</p>\r\n<h2 class=\"subtitle\">10. 让购物车随时可见</h2>\r\n<p><img src=\"http://spyrestudios.com/wp-content/uploads/usable-ecommerce/10.jpg\" alt=\"Keep the Cart Accessible\" /></p>\r\n<p>购物车应当随时可见，应当浮显在右上方。这样用户不必滚动页面去浏览里面的货品和总价。为了更好地体现易用性，应当允许用户在任何时候都可以修改，添加或移除货品。&ldquo;结算按钮&rdquo;应当直接放在购物车内，方便快速访问。</p>',0,'2010-06-25 02:30:42','2010-06-25 02:32:16'),(19,'德国战车走了','<p>虽然我是一个伪球迷，但是年轻的德国队在本次世界杯上的表现让我很激动，酣畅淋漓快攻快乐的风格是我喜欢上德国队的理由。首场4-0大胜澳大利亚，4-04-1干掉英格兰，4-0秒杀阿根廷，德国队用大比分向我们展示他们的风采。</p>\r\n<p>不过昨天凌晨对阵西班牙的比赛让我郁闷。一开场我就感觉今天不妙，果然德国战车很被动，我看不到以往他们的风格。一直纠心地看着比赛，希望德国队能改变场上的状况。可是西班牙小家子气的打法很凑效。</p>\r\n<p>直到最后一分钟，我也期望德国队能扳回比分，哎。</p>\r\n<p>现在我期望德车队在第三名的比赛中赢回他们的风采。</p>\r\n<p>&nbsp;</p>\r\n<p>另外我发现德国队的小将穆勒很像我之前公司的一个老大。</p>',2,'2010-07-08 20:45:45','2010-07-08 20:47:07'),(20,'git的分布式开发之创建远程分支','<p>我喜欢git!<br /><br />它提倡：<br /><br />频繁提交/使用分支/..<br /><br /><br />之前就用过git，不过是个人使用，只用过本地分支 - 合并 - 提交这样一个开发流程，还没有掌握git分布式的开发的精妙之处。<br /><br />最近项目组新来了一个成员，现在是时候好好地了解一下git分布式开发方式了。<br /><br />由于他是新来的，对项目代码还不完成熟悉，所以我担当一个代码审查的角色，我想要的开发方式是这样的：<br /><br />他开发的代码不能提交到主分支master上，需要提交一个开发分支上面，我签下开发分支，审查好代码后，再merge到master上，并提交代码。<br /><br />在git中，具体的操作步骤是这样的：<br /><br />在一个现在的git控制的项目是这样的：<br /><br />在远程创建一个名为dev的分支<br />git push origin origin:refs/heads/dev<br /><br />将远程与本地同步<br />git fetch origin<br /><br /><br />列出远程分支的情况：<br />git branch -r<br /><br />git checkout --track -b dev origin/dev<br />现在在远程和本地都建立了dev的分支，<br /><br />在修改了代码后，git push origin dev就向远程的dev分支提交代码了。<br /><br />如果做错了，就使用下面的命令来删除远程的分支<br />git push origin :heads/dev <br /><br /><br />另外，也可以直接使用<br />git push origin master:dev来创建名为dev的分支</p>\r\n<p>&nbsp;</p>\r\n<p>相关知识链接：</p>\r\n<p><a href=\"http://www.zorched.net/2008/04/14/start-a-new-branch-on-your-remote-git-repository/\">http://www.zorched.net/2008/04/14/start-a-new-branch-on-your-remote-git-repository/</a></p>\r\n<p><a href=\"http://toolmantim.com/thoughts/setting_up_a_new_remote_git_repository\">http://toolmantim.com/thoughts/setting_up_a_new_remote_git_repository</a></p>\r\n<p><a href=\"http://progit.org/book/zh/ch3-5.html\">http://progit.org/book/zh/ch3-5.html</a></p>',1,'2010-07-21 14:58:31','2010-07-21 15:01:01'),(21,'Rails2中的诡异(4)页面注释','<p>今天又遇到 一个令人十分无奈的诡异，花费了我很长的时间。</p>\r\n<p>问大家一个问题，你们认为在rails的页面中(erb)，</p>\r\n<pre class=\"code\">&lt;%@orders.each do |order| %&gt;<br />  &lt;%= order.order_no %&gt; <br />&lt;% end %&gt;&lt;%# end each %&gt; </pre>\r\n<p>与</p>\r\n<pre class=\"code\">&lt;% @orders.each do |order| %&gt;<br />&nbsp;&nbsp; &lt;%= order.order_no %&gt;<br /> &lt;% end %&gt;&lt;% # end each %&gt;</pre>\r\n<p>会是一样的效果么？如果你认为是一样的，那么就错了，</p>\r\n<p>上面的代码，后者的注释中,%与#之间有空格，这会导致接下来输出的html代码不完整！它会跳过若干HTML标签！</p>\r\n<p>有兴趣的可以试试。</p>\r\n<p>通过这个例子，我要记住，以后在页面中写服务器端的注释时,&lt;%后面紧跟#号。</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>',1,'2010-07-22 16:58:52','2010-07-26 17:55:56'),(22,'Capistrano使用小记','<p><a href=\"http://www.capify.org/index.php/Capistrano\">Capistrano</a>本身的使用是很简单的，配置几下就可以使用了，而我这里由于repos是在内部网络，而部署的目标器位于外网。所以需要set deploy_to这个变量。我这里的配方如下：</p>\r\n<pre class=\"code\">set :application, \"zhaobackend2 for http://www.cqror.com\"\r\nset :repository,  \"git@192.168.0.30000000:/data/git_repos/zhao_backend2.git\"\r\n\r\nset :scm, :git\r\n#case ENV[:where]\r\n#when \"production\"\r\n#  set :deploy_to, \"/home/git/www/production/zhao_backend2\"\r\n#when \"test\"\r\n#  set :deploy_to, \"/home/git/www/test/zhao_backend2\"\r\n#else\r\n#  set :deploy_to, \"/home/git/www/test/zhao_backend2\"\r\n#end\r\nset :deploy_to, \"/home/git/www/zhao_backend2\"\r\n\r\n\r\nset :user, \"git\"\r\nset :use_sudo, false\r\nset :port, 8888888888888888888888\r\nset :deploy_via, :copy\r\nset :copy_exclude, [\".git\"]\r\n\r\nserver \"111.111.111.1111111\", :app, :web, :db, :primary =&gt; true\r\n\r\nnamespace :deploy do\r\n\r\n  task :prepare, :roles =&gt; :app do\r\n    run \"cp /web/shared/zhao_backend2_database.yml #{current_path}/config/database.yml\"\r\n    run \"cp /web/shared/noisy_image.rb #{current_path}/app/models/noisy_image.rb\"\r\n  end\r\n\r\n  task :start do\r\n    run \"mongrel_rails start -d -e production -c #{current_path} -p 9998 -P #\r\n\r\n{current_path}/log/mongrel-9998.pid\"\r\n  end\r\n\r\n  task :stop do\r\n    run \"kill `cat #{current_path}/log/mongrel-9998.pid`\"\r\n  end\r\n\r\n  task :restart do\r\n    run \"kill `cat #{current_path}/log/mongrel-9998.pid`\"\r\n    run \"mongrel_rails start -d -e production -c #{current_path} -p 9998 -P #\r\n\r\n{current_path}/log/mongrel-9998.pid\"\r\n  end\r\n\r\n  \r\nend\r\n</pre>',1,'2010-07-26 17:18:07','2010-07-26 17:49:48'),(23,'Rails中方便地产生测试数据','<p><em>我决定这接下来，开始翻译或转载一些不错的BLOG文章，有些技巧需要记下才有印象。</em></p>\r\n<p>在Rails的真实应用中，如果业务比较复杂，流程长，为测试准备各种场景条件下的数据是一件非常麻烦的事情。从现有的环境中准备数据到测试环境的fixture中去是一个不错的起点。我从这个<a href=\"http://www.shamne.com/2010/07/19/production-data-for-testing\" target=\"_self\">博客</a>看到作者写的一个rake任务可以方便地产生fixture数据。</p>\r\n<pre class=\"code\">namespace :test do\r\n  desc \"Generate fixtures\"\r\n  task :new_fixtures =&gt; :environment do\r\n    [\"User\", \"Post\", \"Article\"].each do |m|\r\n      File.open(\"test/fixtures/#{m.constantize.table_name}.yml\", \'w\') do |f|\r\n        m.constantize.find(:all).each do |i|\r\n          f.puts \"item_#{i.id}:\r\n\"\r\n          i.attributes.each_pair do |name, value|\r\n            f.puts \"  #{name}: #{eval(\"i.#{name}.acts_like?(:time)\", binding) ? eval(\"i.#{name}.to_s(:db)\", binding) : value}\r\n\"\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n</pre>',1,'2010-07-28 20:36:07','2010-07-28 20:38:51'),(24,'通过textile生成HTML文件','<p><em>texttile是一个专门为解决html难于使用的语法而设计出来的，它使用一些简单的语法来表现文本格式，</em></p>\r\n<p><em><br />先放在这里，有时间整理一下texttile的语法。RedClothe这个gem可以解析texttile，将其转化为html格式。</em><br /></p>\r\n<pre class=\"code\">require \'rubygems\'\r\nrequire \'RedCloth\'\r\n\r\nlayout_content = File.read(\"layout.html\")\r\n\r\nDir.glob(\"*.textile\").each do |filename|\r\n  content = File.read(filename)\r\n  html = RedCloth.new(content).to_html\r\n  File.open(\"output/#{filename.gsub(\'.textile\',\'.html\')}\", \"w\") do |f| \r\n    f &lt;&lt; layout_content.gsub(\"{{ content }}\", html)\r\n  end\r\nend\r\n</pre>',1,'2010-07-29 21:18:13','2010-07-29 21:23:56'),(25,'对Rails目前在国内的发展情况的思考','<p>公司最近一段时间在招Ruby On Rails的开发人员，到今有半个月了，我邮箱里的收到的简历除了几个撒网式的投递，只有四个一年工作经验的童鞋投了简历（招聘条件中是写的两年以上）。我仔细地看了他们的简历，发现没有可以证明他们经验或能力的亮点，我就回复他们说，能否提供可以证明你们能力的例子或者其它任何方式，然后就没有回应了。就是这个情况。</p>\r\n<p>另外我自己也经常关注51job上的Ruby On Rails的招聘，发现工作机会还是有的，（当然对比Java / php等还是少之又少），要求也不是太高。要是应聘者很是稀少。我想原因有以下几点。</p>\r\n<p>第一，国内的软件技术的发展本身就比国外落后，这个是大环境。目前绝大多数软件专业的院校里没有教授Ruby编程的课程。学Ruby编程的童鞋都是自学成才的。</p>\r\n<p>第二，Ruby On Rails的技术在国内没有形成大规模的潮流。很大一部分公司在技术选型的时候，没有把Rails作为第一的选择来考虑。我们公司使用Java来实现前台业务，使用Rails来实现后台业务在当时就是基于这样一个情况的(其实现在想起来，感觉是反了)。</p>\r\n<p>第三，国内的很多一部分程序员自身的原因。这里就不多说了，我也不是大牛。其实看看国外的Ruby社区就知道国内是个什么样的情况了。</p>\r\n<p>以上是最近在招聘Rails人员所想到的，另外在<a href=\"http://chinaonrails.com/topic/view/4241.html\">ChinaOnRails上讨论说Rails为什么在国内流行不起来</a>，说是文档的原因，以我学习的经历来看，还真不是这个原因。</p>\r\n<p>随便想到的，就写一写。</p>\r\n<p>&nbsp;</p>',2,'2010-07-30 11:55:42','2010-07-30 15:07:34'),(26,'Ruby (On Rails)中调用Oracle数据库存储过程','<p>在Ruby(On Rails)中调用Oracle数据库存储过程的选择不多，我是使用<a href=\"http://github.com/rsim/oracle-enhanced\">oracle_enhanced</a> adapter的作者写的一个叫<a href=\"http://github.com/rsim/ruby-plsql\">ruby-plsql</a>的gem.</p>\r\n<p>看一下ruby-plsql的github上的项目主页，从README中可以很容易的使用。在这里帖一下它的简单用法吧：</p>\r\n<p>&nbsp;</p>\r\n<pre class=\"code\">  require \"rubygems\"\r\n  require \"ruby-plsql\"\r\n\r\n  plsql.connection = OCI8.new(\"hr\",\"hr\",\"xe\")\r\n\r\n  plsql.test_uppercase(\'xxx\')               # =&gt; \"XXX\"\r\n  plsql.test_uppercase(:p_string =&gt; \'xxx\')  # =&gt; \"XXX\"\r\n  plsql.test_copy(\"abc\", nil, nil)          # =&gt; { :p_to =&gt; \"abc\", :p_to_double =&gt; \"abcabc\" }\r\n  plsql.test_copy(:p_from =&gt; \"abc\", :p_to =&gt; nil, :p_to_double =&gt; nil)\r\n                                            # =&gt; { :p_to =&gt; \"abc\", :p_to_double =&gt; \"abcabc\" }\r\n  plsql.hr.test_uppercase(\'xxx\')            # =&gt; \"XXX\"\r\n  plsql.test_package.test_uppercase(\'xxx\')  # =&gt; \'XXX\'\r\n\r\n  # PL/SQL records or object type parameters should be passed as Hash\r\n  p_employee = { :employee_id =&gt; 1, :first_name =&gt; \'First\', :last_name =&gt; \'Last\', :hire_date =&gt; Time.local(2000,01,31) }\r\n  plsql.test_full_name(p_employee)\r\n\r\n  # TABLE or VARRAY parameters should be passed as Array\r\n  plsql.test_sum([1,2,3,4])\r\n\r\n  # Nested objects or arrays are also supported\r\n  p_employee = { :employee_id =&gt; 1, :first_name =&gt; \'First\', :last_name =&gt; \'Last\', :hire_date =&gt; Time.local(2000,01,31),\r\n    :address =&gt; {:street =&gt; \'Street\', :city =&gt; \'City\', :country =&gt; \'Country\'},\r\n    :phones =&gt; [{:type =&gt; \'mobile\', :phone_number =&gt; \'123456\'}, {:type =&gt; \'fixed\', :phone_number =&gt; \'654321\'}]}\r\n  plsql.test_store_employee(p_employee)\r\n\r\n  # Returned cursor can be fetched\r\n  plsql.test_cursor do |cursor|\r\n    cursor.fetch                            # =&gt; one row from cursor\r\n    cursor.fetch_all                        # =&gt; all rows from cursor\r\n  end\r\n\r\n  plsql.connection.autocommit = false\r\n  plsql.commit\r\n  plsql.rollback\r\n\r\n  plsql.logoff\r\n</pre>',1,'2010-08-06 16:42:35','2010-08-06 16:51:30'),(27,'转：效率极低人群之七大习惯','<p>By Henrik Edberg  <br /> <br /> <br /> <br /> 就像寻找对你有益的习惯一样，寻找妨碍你的习惯同样重要。这7种习惯中大多数都可能会轻易成为你日常生活的一部分，使你难以察觉它的存在（或 者它如何影响到你）。我曾经略微尝试了这些习惯，结果毫无疑问，那些重要的事情没有几个可以完成。同时我也要添加说明的是，这只是在生活中你可能形成的影 响效率的主要的7个习惯，我很确定绝不仅仅是这些。 <br /> <br />1、缺席。  <br /> <br />也许你曾经听过伍迪&middot;艾伦所说的这句话：  <br />&ldquo;百分之八十的成功来自于出席。&rdquo;  <br /> <br />更多的出席&mdash;&mdash;这是在生活中你可以保证更多成功所做的最大也是最简单的事情之一，无论是在你的社交生活中，你的事业上还是你的健康方面。如果你想要改善你的健康状况，一个最重要也是最有效的事情就是在每次你该出席时出现在健身房里。  <br /> <br />也许天气会不好，也许你会不想出门，也许你有一大堆其他必须要做的事情。但是，如果即使你在积极性不高时仍然继续出现在健身房里，那将比你呆在家里的沙发上放松要有效的多。  <br /> <br />我想这个也可以推及到生活的其他领域。如果你每天都坚持写作或绘画，你就会快速的得到提高。如果你更多的出门你就可以遇到更多的新朋友。如果你参加更多的约会，你遇到心上人的机会就会大大提高。仅仅只是更多出席就会使你的生活大大不同。而缺席却会使你毫无收获。  <br /> <br />2、拖拖拉拉。  <br /> <br />为了简化，我将最喜欢的3种摆脱拖拉情况的方法列举如下：  <br /> <br />-吞食青蛙。也就是说在一天的最开始就完成那些最艰难最重要的工作。早上良好的开始会让你一天都保持高昂的情绪和积极的动力。这通常会使你这一天都十分高效。  <br /> <br />-你如何吃掉一头大象呢？不要打算一口吃成胖子，这会使你感到过多负担以至于产生拖延的念头。把一项工作分为若干可付诸于行动的小步骤，然后仅仅关注第一步直到把它完成，接下来再继续下一步。  <br /> <br />-说服自己。我发现这种向导型调整十分有效。就在我花了20分钟躺在床上反复默念在这几天里我都十分高效之后，我就不再会陷入拖拉的情况或者浏览1至5个我喜爱的网站寻找更新信息的必要。  <br /> <br />3、做一些无关紧要的事情。  <br /> <br />除了拖拖拉拉以外，你最容易陷入的不良习惯之一就是忙于一些无关紧要的事情之中。  <br /> <br />为了提高效率你也许需要某种时间管理方法。它可能会是一件极为简单的事情，比如在一天的开始使用80/20法则。80/20法则,也就是我们通常 所熟悉的帕累托法则认为， 80%的收获源自20%的努力。所以为求高效你应该将你精力的大部分集中在那些极少数重要的事情上。 <br /> <br />当使用这个法则时你只需按优先顺序写下这一天你需要做的3件最重要的事情，然后从头做起。即使你只能完成其中的一件事，你仍然完成了今天最重要的 事情。也许你也会偏爱其他诸如GTD等方法。但是无论你如何组织工作，最关键的还是寻找那些最重要的工作，这样你就不必花费几天，几个星期甚至几个月的时 间去忙于那些并不是很重要的事情。如果这些事情无关紧要，那么即使你快速的完成它们也是没有多大用处的。 <br /> <br />4、多虑。  <br /> <br />因为多虑而很少采取行动。陷于无穷的分析之中只会使你虚度光阴。行动之前加以思考是没有错的。做一些调查研究，制定一个计划，探究可能存在的积极以及不利因素。  <br /> <br />但是强制性的反复思考就会成为另外一种浪费时间的做法了。在尝试之前你没有必要去从每一个角度检查每一件事情。而且你也不可以等到一个最完美的时 间再去做事，因为这样的时间从来不会出现。如果你继续这样思考就只会使自己陷的越来越深，从而使采取行动变得越来越难。相反，虽然思考在一定程度上对你有 所帮助，但你现在需要做的就只是停止思考，然后去做那些你应该做的事情。 <br /> <br />5、凡事过于消极。  <br /> <br />当你凡事都从消极方面考虑时，你的积极性就会被大大打击。你会发现到处都是问题和错误，而这些问题是本不存在的。你抓住细节不放。如果你想要寻找一个不做某事的理由，这当然没有问题。而当你从一个消极角度看问题时，每次你都可能找出十个借口。  <br /> <br />因此你几乎一事无成。你向任何愿意倾听的人诉苦（也许很多人并不想听），抱怨你的工作，生活和领导有多么的差劲。你的生活取决于你如何看待这个世界，这已经成为一个能够自我实现的预测。  <br /> <br />对此的一个解决方法就是了解消极方面的限度，认识到你的消极思考并不是这个世界的真实写照。然后不妨尝试一些其他的角度。举例来说，你可以尝试着 培养一下凡事从更为积极和乐观的角度思考的习惯，这会对你大有帮助。通过这种方式，你也许就会开始尝试这种积极性的挑战。这并不容易，然而如果你接受了这 种挑战，连续7天都只从积极方面思考，你就会突然意识到你看问题的角度和想法是如此深刻地影响着你对世界的理解和你所得到的成果。 <br /> <br />6、固执己见，与世隔绝。  <br /> <br />人们很难去承认自己的想法不是最佳选择，因此你越来越执着于自己的想法，变得闭目塞听。这会让你很难取得进步，比如说效率就会很难提高。在这种情况下，即使认真思考改变人生的可能性都会变得很难。  <br /> <br />显然，解决方法之一就是打开心胸。开阔视野，从他人和自己的错误中汲取教训，从书籍等资源中获取知识。与任何事一样，这事说起来容易做起来难。正如前面所说，对此我的建议就是认识到你的知识领域毕竟是有限的，而你做事的方式也会存在不足。那么不妨就尝试一下新事物吧。  <br /> <br />而我的另一条建议就是，阅读一下埃克哈特&middot;托利的《新天地》，特别是有关Ego的章节。正如托利所建议的，如果你不再像Ego那样思考，你就会更 加容易接受新思想，抛弃那些已经无用的旧思想。另外我想要补充说明的就是：不要迷信书本，也不要盲目追求新的信息，否则你就会成为一个沉迷于自我帮助的 人。在行动中运用那些新信息和你学到的事情，然后加以尝试。 <br /> <br />7、持续信息过剩。  <br /> <br />信息过剩并不是说你过多的阅读，我所指的是所有输入信息的过剩。如果你让所有的信息都涌进大脑，这当然会导致难于清晰思考，因为刺激源太多了。以下就是这种习惯可能会存在的弊端：  <br /> <br />-你所接受的一些信息也许会是消极的。媒体和周围环境会因种种原因提供一种消极的信息。如果你没有根据需要对信息加以选择，也许你就会陷入消极之中，从而影响到你的所思，所感，所为。  <br /> <br />-这会使你急于追赶当今发生的事情，然而每时每刻都有十几件事同时发生，想要追赶上它们几乎是不可能的事情。你的生活会因此充满压力。  <br /> <br />-如果你持续被信息轰炸，并且还试图将所有信息分类，那么你将很难做出决定并采取行动。就我个人而言，如果我得到过多的信息，就会造成某种形式上的瘫痪，一事无成。或者你会被这种习惯所困，终日急于忙碌在一些非重要的事情上。  <br /> <br />为了可以集中精力，清晰思考并付诸行动，你就需要在吸取信息时更有选择性。当你工作时尽可能的避免那些分散注意力的事物。关掉电话，断开网络，关 上大门。你就会不可思议的发现，当你没有每隔五分钟就被打扰一次，没有机会因浏览RSS-feeds或喜爱的网站而拖延时，居然可以完成这么多的事情。 <br /> <br />现在并不是说我建议你们停止阅读所有的博客或报纸。但是一定要清楚哪些是你真正想要阅读的，哪些只是用来打发时间的。同时你也可以查看其他开阔性信息的领域。  <br /> <br />比如说，你没有必要陷入所有来自周围环境的消极情绪。如果周围的所有人都在拖延或者焦急的忙于各种非重要的事情时，你会很容易被这种情绪所影响。如果你有一扇心灵之门，关上它而去关注更为重要的事情，这会是个不错的主意。</p>',2,'2010-08-20 12:01:06','2010-08-20 12:01:06'),(28,'在Rails3中使用jquery','<p>很是喜欢Jquery简洁的api，所以我现在的项目都是使用Jquery的，默认创建的Rails3项目中是使用Prototype js的，我们可以加一个<strong>-J</strong>选项的，这将不会在public/javascripts目录中添加controls.js，dragdrop.js，effects.js等js文件，同时会去除config/application.rb中的<strong>config.action_view.javascript_expansions[:defaults] = %w()</strong>的注释，我们所要做的就是将jquery.js放在public/javascripts/目录，然后配置<strong>config.action_view.javascript_expansions[:defaults] = %w(jquery).</strong></p>\r\n<p>不过有个gem叫<a href=\"http://github.com/indirect/jquery-rails\" target=\"_blank\">jquery-rails</a> ，通过这个gem，我们可以更方便地使用jquery:</p>\r\n<p>In your Gemfile, add this line:</p>\r\n<pre><code>gem \"jquery-rails\"</code></pre>\r\n<p>Then, run <code>bundle install</code>.  To invoke the generator, run:<br /> <code>rails generate jquery:install #--ui to enable jQuery UI</code> <br /> 注意，这个时候要把config.action_view.javascript_expansions[:defaults] = %w()注释才会使javascript_include_tag(:defaults)引进jquery的那些文件。</p>',1,'2010-09-29 02:36:33','2010-09-29 02:48:38');
